console.log("–ö–æ–Ω—Ç–µ–Ω—Ç-—Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω");

setTimeout(() => {
    if (isLmsPage()) {
        injectCasinoInterface();
        updateDeadlineCount();
        setupMutationObserver();
    }
}, 1500);
// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ LMS
function isLmsPage() {
    return document.querySelector('.badge__days') !== null ||
        window.location.href.includes('lms.');
}

// –í—Å—Ç–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞–∑–∏–Ω–æ
function injectCasinoInterface() {
    const casinoHTML = `
    <div id="lms-casino-container" style="
      position: fixed; bottom: 20px; right: 20px; z-index: 9999;
      background: #1a1a2e; color: white; padding: 15px; border-radius: 8px;
      font-family: Arial, sans-serif; box-shadow: 0 0 10px rgba(0,0,0,0.5);
      width: 250px;
    ">
      <h3 style="margin: 0 0 10px 0; color: gold;">LMS –ö–∞–∑–∏–Ω–æ</h3>
      <div id="casino-balance" style="margin-bottom: 10px;">–î–µ–¥–ª–∞–π–Ω–æ–≤: <span id="deadline-count">0</span></div>
      
      <div id="slots" style="
        display: flex; justify-content: space-around; font-size: 28px;
        background: #16213e; padding: 10px; border-radius: 5px;
        margin-bottom: 10px;
      ">
        <span>‚ùì</span>
        <span>‚ùì</span>
        <span>‚ùì</span>
      </div>

      <input id="bet-amount" type="number" min="1" style="
        width: 100%; padding: 5px; border: none; border-radius: 4px;
        background: #0f3460; color: white; margin-bottom: 10px;
      ">
      <button id="spin-button" style="
        width: 100%; padding: 8px; background: #e94560; color: white;
        border: none; border-radius: 4px; cursor: pointer;
      ">–ö—Ä—É—Ç–∏—Ç—å!</button>
      <div id="casino-result" style="margin-top: 10px;"></div>
    </div>
    `;
    document.body.insertAdjacentHTML('beforeend', casinoHTML);

    document.getElementById('spin-button').addEventListener('click', spin);
}
// –ü–æ–¥—Å—á—ë—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤
function updateDeadlineCount() {
    try {
        const deadlineElements = document.querySelectorAll('.badge__days');
        let totalDeadlines = 0;

        deadlineElements.forEach(el => {
            const text = el.textContent.replace(/\D+/g, '');
            const count = parseInt(text) || 0;
            totalDeadlines += count;
            console.log(`–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç:`, el, `–ó–Ω–∞—á–µ–Ω–∏–µ:`, count);
        });

        document.getElementById('deadline-count').textContent = totalDeadlines;
        return totalDeadlines;
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤:', e);
        return 0;
    }
}
function updateLmsDeadlineDisplay(newTotal) {
    const deadlineElements = document.querySelectorAll('.badge__days');
    const each = Math.floor(newTotal / deadlineElements.length);

    deadlineElements.forEach(el => {
        el.textContent = `${each} –¥–Ω–µ–π`; // –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ LMS
    });
}

// –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ DOM
function setupMutationObserver() {
    let timeoutId = null;

    const observer = new MutationObserver(() => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            updateDeadlineCount();
        }, 300); // 300 –º—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    });

    const target = document.querySelector('#main-content') || document.body;

    observer.observe(target, {
        childList: true,
        subtree: true
    });

    console.log("MutationObserver –∑–∞–ø—É—â–µ–Ω –Ω–∞", target);
}
// –ö—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω
function spin() {
    const symbols = ['üçí', 'üçã', 'üîî', 'üíé', 'üçÄ'];
    const betInput = document.getElementById('bet-amount');
    const slots = document.querySelectorAll('#slots span');
    const resultDiv = document.getElementById('casino-result');

    let betAmount = parseInt(betInput.value);
    let current = parseInt(document.getElementById('deadline-count').textContent) || 0;

    if (isNaN(betAmount) || betAmount < 1) {
        showResult("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞!", 'error');
        return;
    }

    if (betAmount > current) {
        showResult("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–¥–ª–∞–π–Ω–æ–≤!", 'error');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
    const spinButton = document.getElementById('spin-button');
    spinButton.disabled = true;
    spinButton.textContent = '...';

    // "–í—Ä–∞—â–∞–µ–º"
    const roll = setInterval(() => {
        slots.forEach(slot => {
            slot.textContent = symbols[Math.floor(Math.random() * symbols.length)];
        });
    }, 100);

    setTimeout(() => {
        clearInterval(roll);

        // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
        const result = [
            symbols[Math.floor(Math.random() * symbols.length)],
            symbols[Math.floor(Math.random() * symbols.length)],
            symbols[Math.floor(Math.random() * symbols.length)],
        ];

        result.forEach((sym, i) => slots[i].textContent = sym);

        const [a, b, c] = result;

        if (a === b && b === c) {
            const winAmount = betAmount * 2;
            showResult(`üéâ 3 ${a}! –ü–æ–±–µ–¥–∞ +${winAmount}`, 'win');
            current += winAmount;
        } else if (a === b || b === c || a === c) {
            const bonusAmount = Math.floor(betAmount * 1.25);
            showResult(`ü•à 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! –ë–æ–Ω—É—Å +${bonusAmount}`, 'win');
            current += bonusAmount;
        } else {
            showResult(`üò¢ –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. -${betAmount}`, 'lose');
            current -= betAmount;
        }

        document.getElementById('deadline-count').textContent = current;
        updateLmsDeadlineDisplay(current);

        spinButton.disabled = false;
        spinButton.textContent = '–ö—Ä—É—Ç–∏—Ç—å!';
    }, 1500);
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function showResult(message, type) {
    const resultDiv = document.getElementById('casino-result');
    resultDiv.textContent = message;
    resultDiv.style.color = type === 'win' ? '#2ecc71' : type === 'error' ? '#e74c3c' : '#ecf0f1';
    resultDiv.style.textAlign = 'center';
    resultDiv.style.fontWeight = 'bold';
}
